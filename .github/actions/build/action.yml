name: build
description: Build Android and iOS
inputs:
  working-directory:
    description: The root directory of the flutter app within this repository
    default: ./
  store-base64:
    description: "keyAlias with which to sign the app"
    required: true
  store-pass:
    description: "The password for the key used to sign the app"
    required: true
  key-alias:
    description: "The alias for the keyAlias"
    required: true
  key-pass:
    description: "The password for the store  used to sign the app"
    required: true
  build-apk:
    description: "Build APKs for internal releases"
    default: true
  build-aab:
    description: "Build AAB for Playstore"
    default: true
  build-ios:
    description: "Build iOS and upload to TestFlight"
    default: true
  ios-app-path:
    description: "iOS App path"
    required: false
  appstore-issuer-id:
    description: "AppStore Issuer id"
    required: false
  appstore-api-key-id:
    description: "AppStore API key"
    required: false
  appstore-api-private-key:
    description: "AppStore API private key"
    required: false

runs:
  using: "composite"
  steps:
    - name: Check java found
      id: check_java
      shell: bash
      run: |
        if java --version; then
            echo "installed=true" >> "$GITHUB_OUTPUT"
        else
            echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Install java
      if: steps.check_java.outputs.installed == 'false'
      uses: actions/setup-java@v3
      with:
        distribution: "zulu"
        java-version: "17.x"
        cache: "gradle"

    - name: Check flutter found
      id: check_flutter
      shell: bash
      run: |
        if flutter --version; then
            echo "installed=true" >> "$GITHUB_OUTPUT"
        else
            echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Setup flutter
      if: steps.check_flutter.outputs.installed == 'false'
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    - run: flutter --version
      shell: bash

    - name: Decode keystore and create jks and properties file for signing the app
      shell: bash
      run: |
        echo "${{ inputs.store-base64 }}" | base64 --decode > app/keystore.jks
        echo "storeFile=keystore.jks" >> key.properties
        echo "storePassword=${{ inputs.store-pass }}" >> key.properties
        echo "keyAlias=${{ inputs.key-alias }}" >> key.properties
        echo "keyPassword=${{ inputs.key-pass }}" >> key.properties
      working-directory: ${{ inputs.working-directory }}/android

    - name: Build APK
      if: ${{ inputs.build-apk }}
      run: flutter build apk --release --target-platform android-arm,android-arm64 --split-per-abi --verbose
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Build AAB
      if: ${{ inputs.build-aab }}
      run: flutter build appbundle --dart-define release=google-play
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Build iOS App
      if: ${{ inputs.build-ios }}
      uses: cedvdb/action-flutter-build-ios@v1
      with:
        # always use --export-options-plist=ios/GithubActionsExportOptions.plist
        build-cmd: flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist
        certificate-base64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
        certificate-password: ${{ secrets.IOS_BUILD_CERTIFICATE_PASSWORD }}
        provisioning-profile-base64: ${{ secrets.IOS_MOBILE_PROVISIONING_PROFILE_BASE64 }}
        keychain-password: ${{ secrets.IOS_GITHUB_KEYCHAIN_PASSWORD }}

    - name: Upload iOS app to TestFlight
      if: ${{ inputs.build-ios }}
      uses: apple-actions/upload-testflight-build@v1
      with: 
        app-path: ${{ inputs.ios-app-path }}
        issuer-id: ${{ inputs.appstore-issuer-id }}
        api-key-id: ${{ inputs.appstore-api-key-id }}
        api-private-key: ${{ inputs.appstore-api-private-key }}