name: CICD

on:
  push:
    tags:
    # - 'r[0-9]+.[0-9]+.[0-9]+*'
    - 'c[0-9]+*' 

env:
  WORKING_DIRECTORY: ./
  TARGET_NAME: "LifeTalk"

jobs:
  build:
    # needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android-apk
            os: ubuntu-latest
            targets: apk

          - platform: android-aab
            os: ubuntu-latest
            targets: aab

          # - platform: ios
          #   os: macos-13
          #   aarch: universal
          #   filename: LifeTalk-ios
          #   targets: ipa
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Check java found
        id: check_java
        shell: bash
        run: |
          if java --version; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install java
        if: steps.check_java.outputs.installed == 'false'
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17.x"
          cache: "gradle"

      - name: Check flutter found
        id: check_flutter
        shell: bash
        run: |
          if flutter --version; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup flutter
        if: steps.check_flutter.outputs.installed == 'false'
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - run: flutter --version
        shell: bash
            
      - name: Decode keystore and create jks and properties file for signing the app
        if: ${{ startsWith(matrix.platform,'android') }}
        shell: bash
        run: |
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > app/keystore.jks
          echo "storeFile=keystore.jks" >> key.properties
          echo "storePassword=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> key.properties
        working-directory: ${{ env.WORKING_DIRECTORY }}/android

      - name: Build ${{ matrix.platform }}
        if: matrix.platform == 'android-apk'
        run: flutter build apk --release --target-platform android-arm,android-arm64 --split-per-abi --verbose  
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Build ${{ matrix.platform }}
        if: ${{ matrix.platform == 'android-aab' }}
        run: flutter build appbundle  --dart-define release=google-play
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
      - name: Copy to out Android APK
        if: ${{ matrix.platform == 'android-apk' }}
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/flutter-apk/*arm64-v8a*.apk out/${{ env.TARGET_NAME }}-arm64.apk || echo "no arm64 apk"
          cp ./build/app/outputs/flutter-apk/*armeabi-v7a*.apk out/${{ env.TARGET_NAME }}-arm7.apk || echo "no arm7 apk"
          cp ./build/app/outputs/flutter-apk/*x86_64*.apk out/${{ env.TARGET_NAME }}-x86_64.apk || echo "no x64 apk"
          cp ./build/app/outputs/flutter-apk/app-release.apk out/${{ env.TARGET_NAME }}-universal.apk || echo "no universal apk"

      - name: Copy to out Android AAB
        if: ${{ matrix.platform == 'android-aab' }}
        run: |
          # mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/bundle/release/app-release.aab out/${{ env.TARGET_NAME }}-market.aab || echo "no aab"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.platform}}
          path: ./out
          retention-days: 1
