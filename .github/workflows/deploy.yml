name: Build

on:
  push:
    tags:
    - 'r[0-9]+.[0-9]+.[0-9]+*'
    - 'r[0-9]+*' 

env:
  IS_GITHUB_ACTIONS: 1
  CHANNEL: "${{ inputs.channel }}"
  FLUTTER_VERSION: '3.22.x'
  NDK_VERSION: r26d
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  TAG_NAME: "${{ inputs.tag-name }}"
  TARGET_NAME_apk: "LifeTalk-Android"
  TARGET_NAME_aab: "LifeTalk-Android"
  TARGET_NAME_ipa: "LifeTalk-iOS"

jobs:
  test:
    outputs:
      draftBuildCode: ${{ steps.draftBuildCode.outputs.datetime }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2.16.0 #issue with 2.13
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      # - name: Prepare
      #   run: make linux-prepare
      # - name: Test
      #   run: flutter test

      - name: make draftBuildCode
        id: draftBuildCode
        run: echo "::set-output name=datetime::$(date +'%d.%H.%M')"


  build:
    needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android-apk
            os: ubuntu-latest
            targets: apk

          - platform: android-aab
            os: ubuntu-latest
            targets: aab

          # - platform: ios
          #   os: macos-13
          #   aarch: universal
          #   filename: LifeTalk-ios
          #   targets: ipa
    runs-on: ${{ matrix.os }}
    steps:
    #   - name: checkout
    #     uses: actions/checkout@v3
    #   - name: Import Apple Codesign Certificates
    #     if: ${{ inputs.upload-artifact && startsWith(matrix.os,'macos') }}
    #     uses: apple-actions/import-codesign-certs@v2
    #     with: 
    #         p12-file-base64: "${{ secrets.APPLE_CERTIFICATE_P12 }}"
    #         p12-password: "${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}"

    #   - name: Import Apple Mobile Provisioning Profile
    #     if: ${{ inputs.upload-artifact && startsWith(matrix.os,'macos') }}
    #     run: |
    #        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #        echo "${{secrets.APPLE_MOBILE_PROVISIONING_PROFILES_TARGZ_BASE64}}"|base64 --decode | tar xz -C ~/Library/MobileDevice/Provisioning\ Profiles          
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0 #issue with 2.13
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          # flutter-version-file: pubspec.yaml
          channel: 'stable'
          cache: true

      
      - name: Setup Java
        if: startsWith(matrix.platform,'android')
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Setup NDK
        if: startsWith(matrix.platform,'android')
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true
          link-to-sdk: true

      - name: Setup Gradle 8.1
        if: startsWith(matrix.platform,'android')
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.5

      # - name: Setup dependencies
      #   run: |
      #     make ${{ matrix.platform }}-install-dependencies

      - name: Setup Android Signing Properties
        if: ${{ inputs.upload-artifact && startsWith(matrix.platform,'android') }}
        run: |
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > android/key.jks
          echo "storeFile=$(pwd)/android/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties


      - name: Build ${{ matrix.platform }}
        if: matrix.platform == 'android-apk'
        run: |
        flutter build apk --release --target-platform android-arm,android-arm64 --split-per-abi --verbose  
	      ls -R build/app/outputs
        shell: bash
        working-directory: ./
        
      - name: Build ${{ matrix.platform }}
        if: matrix.platform == 'android-aab'
        run: |
        flutter build appbundle  --dart-define release=google-play
	      ls -R build/app/outputs
        shell: bash
        working-directory: ./

      # - name: Prepare for ${{ matrix.platform }}
      #   run: |
      #     make ${{ matrix.platform }}-prepare
      #     tree
      # - name: Build ${{ matrix.platform }}
      #   # env:
      #   #   SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      #   run: |
      #     make ${{ matrix.platform }}-release

              
      - name: Copy to out Android APK
        if: matrix.platform == 'android-apk'
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/flutter-apk/*arm64-v8a*.apk out/${TARGET_NAME_apk}-arm64.apk || echo "no arm64 apk"
          cp ./build/app/outputs/flutter-apk/*armeabi-v7a*.apk out/${TARGET_NAME_apk}-arm7.apk || echo "no arm7 apk"
          cp ./build/app/outputs/flutter-apk/*x86_64*.apk out/${TARGET_NAME_apk}-x86_64.apk || echo "no x64 apk"
          cp ./build/app/outputs/flutter-apk/app-release.apk out/${TARGET_NAME_apk}-universal.apk || echo "no universal apk"

      - name: Copy to out Android AAB
        if: matrix.platform == 'android-aab'
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/bundle/release/app-release.aab out/LifeTalk-android-market.aab || echo "no aab"

      - name: Upload Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.platform}}
          path: ./out
          retention-days: 1

      # - name: Clean up keychain and provisioning profile
      #   if: ${{ always() && startsWith(matrix.os,'macos')}}
      #   run: |
      #     security delete-keychain $RUNNER_TEMP/app-signing.keychain-db ||echo ok
      #     rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision ||echo ok
  update-draft:
    permissions: write-all
    if: ${{ inputs.upload-artifact }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "*"
          path: ./out/
          

      - name: Display Files Structure
        run: ls -R
        working-directory: ./out

      - name: Delete Current Release Assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'draft'
          deleteOnlyFromDrafts: false
          
      - name: prepare_release_message
        run: |
          pip install gitchangelog pystache mustache markdown
          prelease=$(curl --silent "https://api.github.com/repos/LifeTalk/LifeTalk-next/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')
          current="${{ github.ref_name }}"
          sed 's|RELEASE_TAG|${{ env.TAG_NAME }}|g' ./.github/release_message.md > release.md
          echo -e "\n\n<details markdown=1><summary>All changes from $current to the latest commit:</summary>\n\n">>release.md
          gitchangelog "${prelease}.." >> release.md  2>&1 || echo "Error in gitchangelog"
          echo -e "\n\n</details>">>release.md
      - name: Create or Update Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./out/*
          name: 'draft'
          tag_name: 'draft'
          body_path: './release.md'
          prerelease: true
  upload-release:
    permissions: write-all
    if: ${{ inputs.upload-artifact && inputs.tag-name != 'draft' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "*"
          path: ./out/

      - name: Display Files Structure
        run: |
          ls -R ./out
          ls -R ./.github/
          ls -R ./.git/
          mv out/LifeTalk-android-market.aab  LifeTalk-android-market.aab

      - name: prepare_release_message
        run: |
          sed 's|RELEASE_TAG|${{ env.TAG_NAME }}|g' ./.github/release_message.md >> release.md

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: ${{ env.CHANNEL == 'dev' }}
          tag_name: ${{ env.TAG_NAME }}
          body_path: './release.md'
          files: ./out/*

      - name: Create service_account.json
        run: echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' > service_account.json

      - name: Deploy to Google Play Internal Testers
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service_account.json
          packageName: app.LifeTalk.com
          releaseName: ${{ env.TAG_NAME }}
          releaseFiles: ./LifeTalk-android-market.aab
          track: 'beta'


  # upload-to-testflight:
  #   needs: [build]
  #   if: ${{ inputs.upload-artifact &&  inputs.tag-name != 'draft' }}
  #   #if: ${{ inputs.upload-artifact }}
  #   runs-on: macOS-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         merge-multiple: true
  #         pattern: "*ios*"
  #         path: ./out/

  #     - uses: Apple-Actions/import-codesign-certs@v2
  #       with:
  #         p12-file-base64: ${{ secrets.APPLE_UPLOAD_CERTIFICATE_P12 }}
  #         p12-password: ${{ secrets.APPLE_CERTIFICATE_P12_PASSWORD }}

  #     - uses: Apple-Actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: app.LifeTalk.com
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  #     - uses: Apple-Actions/download-provisioning-profiles@v1
  #       with:
  #         bundle-id: app.LifeTalk.com.SingBoxPacketTunnel
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  


  #     - name: Import Apple Mobile Provisioning Profile
  #       run: |
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         echo "${{secrets.APPLE_DIST_PROVISIONING_PROFILES_TARGZ_BASE64}}"|base64 --decode | tar xz -C ~/Library/MobileDevice/Provisioning\ Profiles

  #     - uses: Apple-Actions/upload-testflight-build@v1
  #       with:
  #         app-path: 'out/LifeTalk-iOS.ipa' 
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}